# Отчёт о проведённой автоматизации

## Запланировано/Сделано

### Запланировано:
- Автоматизировать позитивные и негативные UI сценарии тестирования сервисов покупки туров («Оплата по карте» и «Кредит по данным карты»).  
- Автоматизировать API сценарии.  
- Реализовать поддержку СУБД MySQL и PostgreSQL.  

### Сделано:
- Все запланированные сценарии автоматизированы.  
- Реализована работа тестов с MySQL и PostgreSQL.  
- Выявлены различия в стабильности тестов между СУБД: PostgreSQL показал больше падений.  

---

## Сработавшие риски

- **Поле «Владелец карты»** — самая уязвимая зона: 10 падений из 12 тестов.  
- **SQL-тесты** нестабильны: по одному падению в каждом наборе запросов (несоответствие UI ↔ БД).  
- **PostgreSQL** дополнительно показал падение в `CardNumberFieldValidationTest`.  
- Ошибки в обработке **даты** и **CVV** (по 2 падения в каждом наборе).  

---

## Итог по времени
- Разработка плана тестирования — 8 ч (факт: 8 ч).  
- Подготовка инструментов и написание автотестов — 64 ч (факт: 70 ч).  
- Подготовка отчётной документации и баг-репортов — 12 ч (факт: 5 ч).  
- Запас 24 ч — не использован.  

**Итого:** запланировано 84 ч (108 ч с запасом), фактически 83 ч.  

---

## Основные найденные дефекты

1. **Поле «Владелец карты» (CardholderFieldValidationTest)**  
   - 83% тестов падает (10 из 12).  
   - Проблемы с валидацией русских/латинских символов, дефисов, пробелов.  
   - **Критический дефект**: блокирует успешное оформление покупки.  

2. **Поле «Дата» (DateFieldValidationTest)**  
   - 2 падения из 16 тестов.  
   - Ошибки при работе с граничными значениями даты (срок действия карты).  
   - **Средний риск**: возможные отказы при оплате.  

3. **Поле «CVV» (CvvFieldValidationTest)**  
   - 2 падения из 8 тестов.  
   - Ошибки на граничных значениях (например, 000, 999).  
   - **Средний риск**: блокировка успешных платежей.  

4. **SQL-тесты (CreditPaySqlRequestTest, PaySqlRequestTest)**  
   - По одному падению в каждом наборе.  
   - Несоответствие данных между UI и БД.  
   - **Высокий риск**: рассинхронизация логики системы.  

5. **Поле «Номер карты» (CardNumberFieldValidationTest, только PostgreSQL)**  
   - 1 падение из 6 тестов.  
   - Ошибка специфична для PostgreSQL, в MySQL не проявляется.  
   - **Средний риск**: разное поведение системы на разных СУБД.  

---

## Общие выводы

- Общая стабильность тестов ниже 70% (MySQL — 69.2%, PostgreSQL — 67.3%).  
- Критическая проблема: некорректная валидация владельца карты.  
- Несоответствия между UI и БД требуют приоритетного исправления.  
- API-тесты и проверки пустых полей работают корректно, рисков не несут.  